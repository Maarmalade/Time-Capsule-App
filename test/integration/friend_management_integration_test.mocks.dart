// Mocks generated by Mockito 5.4.4 from annotations
// in time_capsule/test/integration/friend_management_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:time_capsule/models/friend_request_model.dart' as _i6;
import 'package:time_capsule/models/user_profile.dart' as _i7;
import 'package:time_capsule/services/friend_service.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCredential_1 extends _i1.SmartFake implements _i2.UserCredential {
  _FakeUserCredential_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_2<T extends Object?> extends _i1.SmartFake
    implements _i3.CollectionReference<T> {
  _FakeCollectionReference_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_3<T extends Object?> extends _i1.SmartFake
    implements _i3.DocumentReference<T> {
  _FakeDocumentReference_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_4<T extends Object?> extends _i1.SmartFake implements _i3.Query<T> {
  _FakeQuery_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_5<T extends Object?> extends _i1.SmartFake
    implements _i3.QuerySnapshot<T> {
  _FakeQuerySnapshot_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentSnapshot_6<T extends Object?> extends _i1.SmartFake
    implements _i3.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i2.FirebaseAuth {
  MockFirebaseAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.User? get currentUser => (super.noSuchMethod(Invocation.getter(#currentUser)) as _i2.User?);

  @override
  _i4.Stream<_i2.User?> get authStateChanges =>
      (super.noSuchMethod(
        Invocation.getter(#authStateChanges),
        returnValue: _i4.Stream<_i2.User?>.empty(),
      ) as _i4.Stream<_i2.User?>);

  @override
  _i4.Future<_i2.UserCredential> createUserWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.UserCredential>.value(_FakeUserCredential_1(
          this,
          Invocation.method(
            #createUserWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.UserCredential>);

  @override
  _i4.Future<_i2.UserCredential> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.UserCredential>.value(_FakeUserCredential_1(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.UserCredential>);

  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i3.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CollectionReference<Map<String, dynamic>> collection(String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionPath],
        ),
        returnValue: _FakeCollectionReference_2<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
      ) as _i3.CollectionReference<Map<String, dynamic>>);

  @override
  _i3.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #doc,
          [documentPath],
        ),
        returnValue: _FakeDocumentReference_3<Map<String, dynamic>>(
          this,
          Invocation.method(
            #doc,
            [documentPath],
          ),
        ),
      ) as _i3.DocumentReference<Map<String, dynamic>>);
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i2.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get uid => (super.noSuchMethod(
        Invocation.getter(#uid),
        returnValue: '',
      ) as String);

  @override
  String? get email => (super.noSuchMethod(Invocation.getter(#email)) as String?);

  @override
  String? get displayName => (super.noSuchMethod(Invocation.getter(#displayName)) as String?);

  @override
  String? get photoURL => (super.noSuchMethod(Invocation.getter(#photoURL)) as String?);
}

/// A class which mocks [FriendService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFriendService extends _i1.Mock implements _i5.FriendService {
  MockFriendService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.UserProfile>> searchUsersByUsername(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchUsersByUsername,
          [query],
        ),
        returnValue: _i4.Future<List<_i7.UserProfile>>.value(<_i7.UserProfile>[]),
      ) as _i4.Future<List<_i7.UserProfile>>);

  @override
  _i4.Future<_i6.FriendRequest> sendFriendRequest(String? receiverId) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendFriendRequest,
          [receiverId],
        ),
        returnValue: _i4.Future<_i6.FriendRequest>.value(_FakeFriendRequest_7(
          this,
          Invocation.method(
            #sendFriendRequest,
            [receiverId],
          ),
        )),
      ) as _i4.Future<_i6.FriendRequest>);

  @override
  _i4.Future<List<_i6.FriendRequest>> getFriendRequests() => (super.noSuchMethod(
        Invocation.method(
          #getFriendRequests,
          [],
        ),
        returnValue: _i4.Future<List<_i6.FriendRequest>>.value(<_i6.FriendRequest>[]),
      ) as _i4.Future<List<_i6.FriendRequest>>);

  @override
  _i4.Future<void> respondToFriendRequest(
    String? requestId,
    bool? accept,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #respondToFriendRequest,
          [
            requestId,
            accept,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i7.UserProfile>> getFriends() => (super.noSuchMethod(
        Invocation.method(
          #getFriends,
          [],
        ),
        returnValue: _i4.Future<List<_i7.UserProfile>>.value(<_i7.UserProfile>[]),
      ) as _i4.Future<List<_i7.UserProfile>>);

  @override
  _i4.Future<void> removeFriend(String? friendId) => (super.noSuchMethod(
        Invocation.method(
          #removeFriend,
          [friendId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i3.CollectionReference<T> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);

  @override
  _i3.DocumentReference<T> doc([String? path]) => (super.noSuchMethod(
        Invocation.method(
          #doc,
          [path],
        ),
        returnValue: _FakeDocumentReference_3<T>(
          this,
          Invocation.method(
            #doc,
            [path],
          ),
        ),
      ) as _i3.DocumentReference<T>);

  @override
  _i4.Future<_i3.DocumentReference<T>> add(T? data) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValue: _i4.Future<_i3.DocumentReference<T>>.value(_FakeDocumentReference_3<T>(
          this,
          Invocation.method(
            #add,
            [data],
          ),
        )),
      ) as _i4.Future<_i3.DocumentReference<T>>);

  @override
  _i4.Future<_i3.QuerySnapshot<T>> get([_i3.GetOptions? options]) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue: _i4.Future<_i3.QuerySnapshot<T>>.value(_FakeQuerySnapshot_5<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i4.Future<_i3.QuerySnapshot<T>>);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i3.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);

  @override
  _i4.Future<_i3.DocumentSnapshot<T>> get([_i3.GetOptions? options]) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue: _i4.Future<_i3.DocumentSnapshot<T>>.value(_FakeDocumentSnapshot_6<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i4.Future<_i3.DocumentSnapshot<T>>);

  @override
  _i4.Future<void> set(
    T? data, [
    _i3.SetOptions? options,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            data,
            options,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> update(Map<String, Object?>? data) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [data],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i3.DocumentSnapshot<T> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
      ) as bool);

  @override
  T? get data => (super.noSuchMethod(Invocation.getter(#data)) as T?);
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot<T extends Object?> extends _i1.Mock implements _i3.QuerySnapshot<T> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.QueryDocumentSnapshot<T>> get docs => (super.noSuchMethod(
        Invocation.getter(#docs),
        returnValue: <_i3.QueryDocumentSnapshot<T>>[],
      ) as List<_i3.QueryDocumentSnapshot<T>>);

  @override
  int get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: 0,
      ) as int);
}

/// A class which mocks [QueryDocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i3.QueryDocumentSnapshot<T> {
  MockQueryDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
      ) as bool);

  @override
  T get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: _FakeObject_8<T>(
          this,
          Invocation.getter(#data),
        ),
      ) as T);
}

class _FakeFriendRequest_7 extends _i1.SmartFake implements _i6.FriendRequest {
  _FakeFriendRequest_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObject_8<T extends Object?> extends _i1.SmartFake implements T {
  _FakeObject_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}