// Mocks generated by Mockito 5.4.6 from annotations
// in time_capsule/test/integration/file_management_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cloud_firestore/cloud_firestore.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:time_capsule/models/folder_model.dart' as _i4;
import 'package:time_capsule/models/media_file_model.dart' as _i11;
import 'package:time_capsule/models/shared_folder_data.dart' as _i6;
import 'package:time_capsule/models/shared_folder_notification_model.dart'
    as _i9;
import 'package:time_capsule/models/user_profile.dart' as _i7;
import 'package:time_capsule/services/folder_service.dart' as _i2;
import 'package:time_capsule/services/media_service.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FolderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFolderService extends _i1.Mock implements _i2.FolderService {
  MockFolderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> createFolder(_i4.FolderModel? folder) =>
      (super.noSuchMethod(
            Invocation.method(#createFolder, [folder]),
            returnValue: _i3.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#createFolder, [folder]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> updateFolder(String? folderId, Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#updateFolder, [folderId, data]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteFolder(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFolder, [folderId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Stream<List<_i4.FolderModel>> streamFolders({
    required String? userId,
    String? parentFolderId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#streamFolders, [], {
              #userId: userId,
              #parentFolderId: parentFolderId,
            }),
            returnValue: _i3.Stream<List<_i4.FolderModel>>.empty(),
          )
          as _i3.Stream<List<_i4.FolderModel>>);

  @override
  _i3.Future<_i4.FolderModel?> getFolder(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#getFolder, [folderId]),
            returnValue: _i3.Future<_i4.FolderModel?>.value(),
          )
          as _i3.Future<_i4.FolderModel?>);

  @override
  _i3.Future<void> updateFolderName(String? folderId, String? newName) =>
      (super.noSuchMethod(
            Invocation.method(#updateFolderName, [folderId, newName]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteFolders(List<String>? folderIds) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFolders, [folderIds]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<String> createSharedFolder(
    _i4.FolderModel? folder,
    List<String>? contributorIds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createSharedFolder, [folder, contributorIds]),
            returnValue: _i3.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#createSharedFolder, [
                  folder,
                  contributorIds,
                ]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> convertToSharedFolder(
    String? folderId,
    List<String>? contributorIds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#convertToSharedFolder, [
              folderId,
              contributorIds,
            ]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> inviteContributors(
    String? folderId,
    List<String>? userIds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#inviteContributors, [folderId, userIds]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> notifyContributorAdded(
    String? folderId,
    String? contributorId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#notifyContributorAdded, [
              folderId,
              contributorId,
            ]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> removeContributor(String? folderId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#removeContributor, [folderId, userId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> lockFolder(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#lockFolder, [folderId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> unlockFolder(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#unlockFolder, [folderId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i6.SharedFolderData?> getSharedFolderData(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#getSharedFolderData, [folderId]),
            returnValue: _i3.Future<_i6.SharedFolderData?>.value(),
          )
          as _i3.Future<_i6.SharedFolderData?>);

  @override
  _i3.Future<bool> canUserContribute(String? folderId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#canUserContribute, [folderId, userId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> canUserView(String? folderId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#canUserView, [folderId, userId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i7.UserProfile>> getFolderContributors(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#getFolderContributors, [folderId]),
            returnValue: _i3.Future<List<_i7.UserProfile>>.value(
              <_i7.UserProfile>[],
            ),
          )
          as _i3.Future<List<_i7.UserProfile>>);

  @override
  _i3.Stream<List<_i4.FolderModel>> streamAccessibleFolders({
    required String? userId,
    String? parentFolderId,
    bool? includeShared = true,
    bool? includePublic = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#streamAccessibleFolders, [], {
              #userId: userId,
              #parentFolderId: parentFolderId,
              #includeShared: includeShared,
              #includePublic: includePublic,
            }),
            returnValue: _i3.Stream<List<_i4.FolderModel>>.empty(),
          )
          as _i3.Stream<List<_i4.FolderModel>>);

  @override
  _i3.Stream<List<_i4.FolderModel>> streamUserAccessibleFolders(
    String? userId, {
    String? parentFolderId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #streamUserAccessibleFolders,
              [userId],
              {#parentFolderId: parentFolderId},
            ),
            returnValue: _i3.Stream<List<_i4.FolderModel>>.empty(),
          )
          as _i3.Stream<List<_i4.FolderModel>>);

  @override
  _i3.Future<void> makePublic(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#makePublic, [folderId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> makePrivate(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#makePrivate, [folderId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.FolderModel>> getPublicFolders({
    int? limit = 20,
    _i8.DocumentSnapshot<Object?>? startAfter,
    String? searchQuery,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPublicFolders, [], {
              #limit: limit,
              #startAfter: startAfter,
              #searchQuery: searchQuery,
            }),
            returnValue: _i3.Future<List<_i4.FolderModel>>.value(
              <_i4.FolderModel>[],
            ),
          )
          as _i3.Future<List<_i4.FolderModel>>);

  @override
  _i3.Stream<List<_i4.FolderModel>> streamPublicFolders({
    int? limit = 20,
    String? searchQuery,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#streamPublicFolders, [], {
              #limit: limit,
              #searchQuery: searchQuery,
            }),
            returnValue: _i3.Stream<List<_i4.FolderModel>>.empty(),
          )
          as _i3.Stream<List<_i4.FolderModel>>);

  @override
  _i3.Future<bool> isFolderPublic(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#isFolderPublic, [folderId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i9.SharedFolderNotification>> getSharedFolderNotifications(
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getSharedFolderNotifications, [userId]),
            returnValue: _i3.Future<List<_i9.SharedFolderNotification>>.value(
              <_i9.SharedFolderNotification>[],
            ),
          )
          as _i3.Future<List<_i9.SharedFolderNotification>>);

  @override
  _i3.Stream<List<_i9.SharedFolderNotification>>
  streamSharedFolderNotifications(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#streamSharedFolderNotifications, [userId]),
            returnValue: _i3.Stream<List<_i9.SharedFolderNotification>>.empty(),
          )
          as _i3.Stream<List<_i9.SharedFolderNotification>>);

  @override
  _i3.Future<void> markNotificationAsRead(String? notificationId) =>
      (super.noSuchMethod(
            Invocation.method(#markNotificationAsRead, [notificationId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteNotification(String? notificationId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNotification, [notificationId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<int> getUnreadNotificationCount(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUnreadNotificationCount, [userId]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);
}

/// A class which mocks [MediaService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMediaService extends _i1.Mock implements _i10.MediaService {
  MockMediaService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> createMedia(
    String? folderId,
    _i11.MediaFileModel? media,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createMedia, [folderId, media]),
            returnValue: _i3.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#createMedia, [folderId, media]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<String> createMediaWithAttribution(
    String? folderId,
    _i11.MediaFileModel? media,
    String? contributorId,
    bool? isSharedFolder,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createMediaWithAttribution, [
              folderId,
              media,
              contributorId,
              isSharedFolder,
            ]),
            returnValue: _i3.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#createMediaWithAttribution, [
                  folderId,
                  media,
                  contributorId,
                  isSharedFolder,
                ]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> updateMedia(
    String? folderId,
    String? mediaId,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateMedia, [folderId, mediaId, data]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMedia(String? folderId, String? mediaId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMedia, [folderId, mediaId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Stream<List<_i11.MediaFileModel>> streamMedia(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#streamMedia, [folderId]),
            returnValue: _i3.Stream<List<_i11.MediaFileModel>>.empty(),
          )
          as _i3.Stream<List<_i11.MediaFileModel>>);

  @override
  _i3.Future<void> updateFileName(
    String? folderId,
    String? mediaId,
    String? newTitle,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateFileName, [folderId, mediaId, newTitle]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteFiles(String? folderId, List<String>? mediaIds) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFiles, [folderId, mediaIds]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
