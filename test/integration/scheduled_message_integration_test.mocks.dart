// Mocks generated by Mockito 5.4.4 from annotations
// in time_capsule/test/integration/scheduled_message_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:time_capsule/models/scheduled_message_model.dart' as _i6;
import 'package:time_capsule/models/user_profile.dart' as _i7;
import 'package:time_capsule/services/friend_service.dart' as _i8;
import 'package:time_capsule/services/scheduled_message_service.dart' as _i5;
import 'package:cloud_firestore/cloud_firestore.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCredential_1 extends _i1.SmartFake implements _i2.UserCredential {
  _FakeUserCredential_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_2 extends _i1.SmartFake implements _i3.FirebaseFirestore {
  _FakeFirebaseFirestore_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScheduledMessage_3 extends _i1.SmartFake implements _i6.ScheduledMessage {
  _FakeScheduledMessage_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i2.FirebaseAuth {
  MockFirebaseAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.User? get currentUser => (super.noSuchMethod(Invocation.getter(#currentUser)) as _i2.User?);

  @override
  _i4.Stream<_i2.User?> get authStateChanges =>
      (super.noSuchMethod(
        Invocation.getter(#authStateChanges),
        returnValue: _i4.Stream<_i2.User?>.empty(),
      ) as _i4.Stream<_i2.User?>);

  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i3.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i2.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get uid => (super.noSuchMethod(
        Invocation.getter(#uid),
        returnValue: '',
      ) as String);

  @override
  String? get email => (super.noSuchMethod(Invocation.getter(#email)) as String?);

  @override
  String? get displayName => (super.noSuchMethod(Invocation.getter(#displayName)) as String?);

  @override
  String? get photoURL => (super.noSuchMethod(Invocation.getter(#photoURL)) as String?);
}

/// A class which mocks [ScheduledMessageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockScheduledMessageService extends _i1.Mock implements _i5.ScheduledMessageService {
  MockScheduledMessageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.ScheduledMessage> createScheduledMessage(_i6.ScheduledMessage? message) =>
      (super.noSuchMethod(
        Invocation.method(
          #createScheduledMessage,
          [message],
        ),
        returnValue: _i4.Future<_i6.ScheduledMessage>.value(_FakeScheduledMessage_3(
          this,
          Invocation.method(
            #createScheduledMessage,
            [message],
          ),
        )),
      ) as _i4.Future<_i6.ScheduledMessage>);

  @override
  _i4.Future<List<_i6.ScheduledMessage>> getScheduledMessages() => (super.noSuchMethod(
        Invocation.method(
          #getScheduledMessages,
          [],
        ),
        returnValue: _i4.Future<List<_i6.ScheduledMessage>>.value(<_i6.ScheduledMessage>[]),
      ) as _i4.Future<List<_i6.ScheduledMessage>>);

  @override
  _i4.Future<List<_i6.ScheduledMessage>> getReceivedMessages() => (super.noSuchMethod(
        Invocation.method(
          #getReceivedMessages,
          [],
        ),
        returnValue: _i4.Future<List<_i6.ScheduledMessage>>.value(<_i6.ScheduledMessage>[]),
      ) as _i4.Future<List<_i6.ScheduledMessage>>);

  @override
  _i4.Future<void> cancelScheduledMessage(String? messageId) => (super.noSuchMethod(
        Invocation.method(
          #cancelScheduledMessage,
          [messageId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [FriendService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFriendService extends _i1.Mock implements _i8.FriendService {
  MockFriendService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.UserProfile>> getFriends() => (super.noSuchMethod(
        Invocation.method(
          #getFriends,
          [],
        ),
        returnValue: _i4.Future<List<_i7.UserProfile>>.value(<_i7.UserProfile>[]),
      ) as _i4.Future<List<_i7.UserProfile>>);
}